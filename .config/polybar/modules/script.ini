[module/pkgupdates-available]
type = custom/script

; Available tokens:
;   %counter%
; Command to be executed (using "/bin/sh -c [command]")
exec = checkforupdates

; Conditional command that, if defined, needs to exit successfully
; before the main exec command is invoked.
; Default: ""
exec-if = pgrep -x myservice

; Will the script output continous content?
; Default: false
tail = true

; Seconds to sleep between updates
; Default: 5 (0 if `tail = true`)
interval = 90

; Set environment variables in the 'exec' script (unreleased) 
; env-NAME = VALUE
; env-FOO = BAR

; Available tags:
;   <output> - deprecated
;   <label> (default)
format = <label>
format-background = #999
format-foreground = #000
format-padding = 4

; Available tokens:
;   %output%
; Default: %output%
label = %output:0:15:...%

; Available tokens:
;   %counter%
;   %pid%
;
; "click-(left|middle|right)" will be executed using "/bin/sh -c [command]"
click-left = echo left %counter%
click-middle = echo middle %counter%
click-right = echo right %counter%
double-click-left = echo double left %counter%
double-click-middle = echo double middle %counter%
double-click-right = echo double right %counter%

; Available tokens:
;   %counter%
;   %pid%
;
; "scroll-(up|down)" will be executed using "/bin/sh -c [command]"
scroll-up = echo scroll up %counter%
scroll-down = echo scroll down %counter%

Examples
You can use exec-if to only display output once the defined condition is met. For example:

[module/vpn]
type = custom/script
exec = echo vpn
exec-if = pgrep -x openvpn
interval = 5
format-underline = #268bd2
format-prefix = "ðŸ–§ "
format-prefix-foreground = #5b
The %pid% token can be used to send signals to the script, allowing for multiple states. Here is an example of a date script with two states:

[module/date]
type = custom/script
exec = /path/to/date.sh
tail = true
click-left = kill -USR1 %pid%
Note: %pid% actually refers to the sh process that executes the exec command. The shell will generally relay signals to the exec command. However if the command runs in the background it won't. In those cases you can use pgrep to find the oldest child belonging to %pid% and send the signal to that (child) pid:

click-left = "kill -USR1 $(pgrep --oldest --parent %pid%)"

date.sh:

t=0
sleep_pid=0

toggle() {
    t=$(((t + 1) % 2))

    if [ "$sleep_pid" -ne 0 ]; then
        kill $sleep_pid >/dev/null 2>&1
    fi
}


trap "toggle" USR1

while true; do
    if [ $t -eq 0 ]; then
        date
    else
        date --rfc-3339=seconds
    fi
    sleep 1 &
    sleep_pid=$!
    wait
done